package com.roytuts.spring.security.api.auth.jwt.util;

import java.security.Key;
import java.util.Arrays;
import java.util.Date;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.stereotype.Component;

import com.roytuts.spring.security.api.auth.jwt.vo.UserVo;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import io.jsonwebtoken.security.SignatureException;

@Component
public class JwtUtil {

	public UserVo getUser(final String token) {
		try {
			Claims body = Jwts.parserBuilder().setSigningKey(key()).build().parseClaimsJws(token).getBody();

			UserVo user = new UserVo();
			user.setUsername(body.getSubject());

			Set<String> roles = Arrays.asList(body.get("roles").toString().split(",")).stream().map(r -> new String(r))
					.collect(Collectors.toSet());
			user.setRoles(roles);

			return user;
		} catch (Exception e) {
			System.out.println(e.getMessage() + " => " + e);
		}
		return null;
	}

	public String generateToken(UserVo u) {
		Claims claims = Jwts.claims().setSubject(u.getUsername());
		claims.put("roles", u.getRoles());
		long nowMillis = System.currentTimeMillis();
		long expMillis = nowMillis + 180000;
		Date exp = new Date(expMillis);
		return Jwts.builder().setClaims(claims).setIssuedAt(new Date(nowMillis)).setExpiration(exp)
				.signWith(key(), SignatureAlgorithm.HS256).compact();
	}

	public boolean validateToken(final String token) {
		try {
			Jwts.parserBuilder().setSigningKey(key()).build().parse(token);
		} catch (SignatureException ex) {
			return false;
		}

		return true;
	}

	private Key key() {
		return Keys.hmacShaKeyFor(Decoders.BASE64.decode("jwtsecretkeyshouldbelongenoughatleast256bits"));
	}

}
